from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters, ConversationHandler, JobQueue
from utils import save_food, save_water, get_water_summary, save_reflection, get_day_summary
import os
from datetime import datetime
import asyncio

TASKS_DIR = "tasks"
os.makedirs(TASKS_DIR, exist_ok=True)

TASK_ADD = 1000

def get_tasks_file(chat_id):
    return os.path.join(TASKS_DIR, f"tasks_{chat_id}.txt")

def load_tasks(chat_id):
    path = get_tasks_file(chat_id)
    if not os.path.exists(path):
        return []
    with open(path, "r", encoding="utf-8") as f:
        lines = [line.strip() for line in f if line.strip()]
    tasks = []
    for line in lines:
        if "|" in line:
            name, dates = line.split("|", 1)
            done_dates = set(dates.split(",")) if dates else set()
        else:
            name = line
            done_dates = set()
        tasks.append({"name": name, "done": done_dates})
    return tasks

def save_tasks(chat_id, tasks):
    path = get_tasks_file(chat_id)
    with open(path, "w", encoding="utf-8") as f:
        for t in tasks:
            dates = ",".join(sorted(t["done"]))
            f.write(f"{t['name']}|{dates}\n")

async def addtask_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = getattr(update, "message", None)
    if message:
        await message.reply_text("‚ùî –ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–¥–∞—á–∏? –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.")
    return TASK_ADD

async def addtask_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = getattr(update, "effective_chat", None)
    message = getattr(update, "message", None)
    if not chat or not message or not hasattr(message, "text"):
        return ConversationHandler.END
    chat_id = chat.id
    task_name = message.text.strip()
    if not task_name:
        await message.reply_text("‚ùï –ó–∞–¥–∞—á–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return TASK_ADD
    tasks = load_tasks(chat_id)
    tasks.append({"name": task_name, "done": set()})
    save_tasks(chat_id, tasks)
    await message.reply_text(f"‚ûï –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_name}")
    return ConversationHandler.END

async def mytasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = getattr(update, "effective_chat", None)
    message = getattr(update, "message", None)
    if not chat or not message:
        return
    chat_id = chat.id
    tasks = load_tasks(chat_id)
    if not tasks:
        await message.reply_text("‚ùï –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /addtask")
        return
    today = datetime.now().strftime("%Y-%m-%d")
    msg = "<b>–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:</b>\n"
    for i, t in enumerate(tasks, 1):
        status = "‚úÖ" if today in t["done"] else "‚¨ú"
        msg += f"{i}. {t['name']} {status}\n"
    msg += "\n<b>‚ùï –ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π: /donetask –Ω–æ–º–µ—Ä</b>"
    await message.reply_text(msg, parse_mode="HTML")

async def donetask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = getattr(update, "effective_chat", None)
    message = getattr(update, "message", None)
    if not chat or not message:
        return
    chat_id = chat.id
    tasks = load_tasks(chat_id)
    if not tasks:
        await message.reply_text("‚ùï –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /addtask")
        return
    if not context.args or not context.args[0].isdigit():
        await message.reply_text("<b>‚ùï –ò—Å–ø–æ–ª—å–∑—É–π:</b> /donetask –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏", parse_mode="HTML")
        return
    idx = int(context.args[0]) - 1
    if idx < 0 or idx >= len(tasks):
        await message.reply_text("‚ùï –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        return
    today = datetime.now().strftime("%Y-%m-%d")
    tasks[idx]["done"].add(today)
    save_tasks(chat_id, tasks)
    await message.reply_text(f"‚ùï –ó–∞–¥–∞—á–∞ '{tasks[idx]['name']}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è!")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = getattr(update, "message", None)
    if message:
        await message.reply_text(
            "‚ùï –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É!",
            parse_mode="HTML"
        )
    return ConversationHandler.END

FOOD, REFLECTION, WATER = range(3)

MORNING_QUOTES = [
    "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
    "–£–ª—ã–±–Ω–∏—Å—å –Ω–æ–≤–æ–º—É –¥–Ω—é –∏ –æ–Ω —É–ª—ã–±–Ω—ë—Ç—Å—è —Ç–µ–±–µ –≤ –æ—Ç–≤–µ—Ç!",
    "–°–µ–≥–æ–¥–Ω—è ‚Äî –ª—É—á—à–∏–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ª—É—á—à–µ, —á–µ–º –≤—á–µ—Ä–∞.",
    "–ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ç–µ–±–µ —Ä–∞–¥–æ—Å—Ç—å –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ!",
    "–í–µ—Ä—å –≤ —Å–µ–±—è ‚Äî –∏ –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!",
    "–°–¥–µ–ª–∞–π —Å–µ–≥–æ–¥–Ω—è —Ç–æ, –æ —á—ë–º –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—à—å –≥–æ—Ä–¥–∏—Ç—å—Å—è.",
    "–ü—É—Å—Ç—å —Ç–≤–æ–∏ –º—ã—Å–ª–∏ –±—É–¥—É—Ç —Å–≤–µ—Ç–ª—ã–º–∏, –∞ —Å–µ—Ä–¥—Ü–µ ‚Äî —Å–ø–æ–∫–æ–π–Ω—ã–º.",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–∞—è –∂–∏–∑–Ω—å.",
    "–ù–∞—á–Ω–∏ —É—Ç—Ä–æ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∏ –¥–µ–Ω—å —Å–ª–æ–∂–∏—Ç—Å—è —É–¥–∞—á–Ω–æ.",
    "–¢—ã —Å–ø–æ—Å–æ–±–µ–Ω(–Ω–∞) –Ω–∞ –±–æ–ª—å—à–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å!"
]

import random

async def send_morning_quote(context: ContextTypes.DEFAULT_TYPE):
    quote = random.choice(MORNING_QUOTES)
    for chat_id in list(registered_chats):
        try:
            await context.bot.send_message(chat_id=chat_id, text=f"‚õÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n<b>{quote}</b>", parse_mode="HTML")
        except Exception:
            pass


async def delete_message_later(context: ContextTypes.DEFAULT_TYPE):
    job = getattr(context, "job", None)
    if not job or not hasattr(job, "data"):
        return
    data = job.data
    chat_id = data.get('chat_id') if isinstance(data, dict) else None
    message_id = data.get('message_id') if isinstance(data, dict) else None
    if chat_id is None or message_id is None:
        return
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception:
        pass

async def water_reminder(context: ContextTypes.DEFAULT_TYPE):
    job_queue = getattr(context, "job_queue", None)
    for chat_id in list(registered_chats):
        try:
            msg = await context.bot.send_message(chat_id=chat_id, text="üîî –ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã!")
            if job_queue:
                job_queue.run_once(
                    delete_message_later,
                    when=600,
                    data={'chat_id': chat_id, 'message_id': msg.message_id}
                )
        except Exception:
            pass

REGISTERED_CHATS_FILE = "registered_chats.txt"
def load_registered_chats():
    if os.path.exists(REGISTERED_CHATS_FILE):
        with open(REGISTERED_CHATS_FILE, "r", encoding="utf-8") as f:
            return set(int(line.strip()) for line in f if line.strip().isdigit())
    return set()

def save_registered_chats():
    with open(REGISTERED_CHATS_FILE, "w", encoding="utf-8") as f:
        for chat_id in registered_chats:
            f.write(f"{chat_id}\n")

registered_chats = load_registered_chats()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = getattr(update, "effective_chat", None)
    message = getattr(update, "message", None)
    if chat:
        registered_chats.add(chat.id)
        save_registered_chats()
    if message:
        await message.reply_text(
            "<b>–ü—Ä–∏–≤–µ—Ç! ü§ç</b>\n"
            "\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º.\n"
            "–ó–∞–ø–∏—à–∏ —Ç–æ, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –º—ã—Å–ª—å.\n"
            "\n"
            "<b>\"–ë—É–¥—å —Å–æ–±–æ–π. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.\"\n"
            "‚Äî –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥</b>",
            parse_mode="HTML"
        )

async def eat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = getattr(update, "message", None)
    if message:
        await message.reply_text(
            "–ß—Ç–æ —Ç—ã –µ–ª? üçΩÔ∏è\n"
            "–ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞–∫ - –æ–≤—Å—è–Ω–∫–∞ –∏ –±–∞–Ω–∞–Ω.\n"
            "\n"
            "<b>–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –ø—Ä–∏—ë–º –ø–∏—â–∏ —Å—Ç–∞–Ω–µ—Ç –º–∞–ª–µ–Ω—å–∫–∏–º —Ä–∏—Ç—É–∞–ª–æ–º –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ!</b>",
            parse_mode="HTML"
        )
    return FOOD

async def handle_food(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = getattr(update, "message", None)
    chat = getattr(update, "effective_chat", None)
    if not message or not chat or not hasattr(message, "text"):
        return ConversationHandler.END
    text = message.text
    chat_id = chat.id
    if "-" in text:
        label, meal = map(str.strip, text.split("-", 1))
        save_food(label, meal, chat_id)
        advice = "(–∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
        await message.reply_text(
            f"‚ûï –ü—Ä–∏—ë–º –ø–∏—â–∏ –∑–∞–ø–∏—Å–∞–Ω!\n\n<b>–°–æ–≤–µ—Ç: {advice}</b>",
            parse_mode="HTML"
        )
    else:
        await message.reply_text(
            "‚ùï –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –∑–∞–≤—Ç—Ä–∞–∫ - –æ–≤—Å—è–Ω–∫–∞ –∏ –±–∞–Ω–∞–Ω.\n"
            "\n"
            "<b>–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏!</b>",
            parse_mode="HTML"
        )
    return ConversationHandler.END

async def drink(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = getattr(update, "message", None)
    if message:
        await message.reply_text(
            "–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã —Ç—ã –≤—ã–ø–∏–ª? üíß\n"
            "–ù–∞–ø–∏—à–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –º–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: 250\n"
            "\n"
            "<b>–í–æ–¥–∞ ‚Äî —Ç–≤–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏!</b>",
            parse_mode="HTML"
        )
    return WATER

async def handle_water(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = getattr(update, "message", None)
    chat = getattr(update, "effective_chat", None)
    if not message or not chat or not hasattr(message, "text"):
        return ConversationHandler.END
    text = message.text
    chat_id = chat.id
    try:
        amount = int(text)
        save_water(amount, chat_id)
        await message.reply_text(
            f"‚ûï –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª –≤–æ–¥—ã\n"
            "\n"
            "<b>–¢—ã –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–µ–±–µ!</b>",
            parse_mode="HTML"
        )
    except ValueError:
        await message.reply_text(
            "‚ùï –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 250).\n"
            "\n"
            "<b>–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å!</b>",
            parse_mode="HTML"
        )
    return ConversationHandler.END

async def reflect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = getattr(update, "message", None)
    if message:
        await message.reply_text(
            "üí≠ –ö–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å? –ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª?\n"
            "\n"
            "<b>–ü–æ–¥–µ–ª–∏—Å—å –ª—é–±—ã–º–∏ –º—ã—Å–ª—è–º–∏ –∏–ª–∏ —ç–º–æ—Ü–∏—è–º–∏. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å.</b>",
            parse_mode="HTML"
        )
    return REFLECTION

async def handle_reflection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = getattr(update, "message", None)
    chat = getattr(update, "effective_chat", None)
    if not message or not chat or not hasattr(message, "text"):
        return ConversationHandler.END
    chat_id = chat.id
    save_reflection(message.text, chat_id)
    gpt_reply = "–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    await message.reply_text(
        f"‚ûï –†–µ—Ñ–ª–µ–∫—Å–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞!\n\nGPT: {gpt_reply}\n\n<b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—à—å —Å–≤–æ–∏ –º—ã—Å–ª–∏!</b>",
        parse_mode="HTML"
    )
    return ConversationHandler.END

async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = getattr(update, "effective_chat", None)
    message = getattr(update, "message", None)
    if not chat or not message:
        return
    chat_id = chat.id
    summary_text = get_day_summary(chat_id)
    if not summary_text or summary_text.strip() == "":
        await message.reply_text(
            "‚ûñ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –í—Å—ë –ø—É—Å—Ç–æ!\n"
            "\n"
            "<b>–ù–∞—á–Ω–∏ —Å –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —à–∞–≥–∞ ‚Äî –∑–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!</b>",
            parse_mode="HTML"
        )
    else:
        await message.reply_text(
            "–í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n" + summary_text
        )

async def summary_by_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = getattr(update, "effective_chat", None)
    message = getattr(update, "message", None)
    if not chat or not message:
        return
    chat_id = chat.id
    if not context.args:
        await message.reply_text(
            "–£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.\n"
            "\n"
            "<b>–ù–∞–ø—Ä–∏–º–µ—Ä: /summarydate 25.05.2025</b>\n",
            parse_mode="HTML"
        )
        return
    date_str = context.args[0]
    try:
        from datetime import datetime
        date_obj = datetime.strptime(date_str, "%d.%m.%Y")
        date_iso = date_obj.strftime("%Y-%m-%d")
    except ValueError:
        await message.reply_text(
            "‚ùï –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "\n"
            "<b>–ù–∞–ø—Ä–∏–º–µ—Ä: 25.05.2025</b>\n",
            parse_mode="HTML"
        )
        return
    from utils import get_day_summary
    summary = get_day_summary(chat_id, date_override=date_iso)
    if not summary or summary.strip() == "":
        await message.reply_text(
            f"‚ùï –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ {date_str}.\n\n<b>–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é –¥–∞—Ç—É!</b>",
            parse_mode="HTML"
        )
    else:
        await message.reply_text(
            f"–¢–≤–æ—è —Å–≤–æ–¥–∫–∞ –∑–∞ <b>{date_str}:</b>\n\n" + summary,
            parse_mode="HTML"
        )

async def clear_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from utils import get_today_folder
    chat = getattr(update, "effective_chat", None)
    message = getattr(update, "message", None)
    if not chat or not message:
        return
    chat_id = chat.id
    folder = get_today_folder(chat_id)
    try:
        for filename in ["food.txt", "water.txt", "reflection.txt"]:
            path = os.path.join(folder, filename)
            if os.path.exists(path):
                os.remove(path)
        await message.reply_text(
            "‚ùï –í—Å–µ —Ç–≤–æ–∏ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–¥–∞–ª–µ–Ω—ã.\n"
            "\n"
            "<b>–ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!</b>\n",
            parse_mode="HTML"
        )
    except Exception as e:
        await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

async def stop_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = getattr(update, "effective_chat", None)
    message = getattr(update, "message", None)
    if not chat or not message:
        return
    chat_id = chat.id
    if chat_id in registered_chats:
        registered_chats.remove(chat_id)
        save_registered_chats()
        await message.reply_text(
            "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ ‚Äî –≤ —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö!"
        )
    else:
        await message.reply_text(
            "‚ùï –£ —Ç–µ–±—è –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
        )

def register_handlers(app):
    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("addtask", addtask_start)],
        states={
            TASK_ADD: [MessageHandler(filters.TEXT & ~filters.COMMAND, addtask_save)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    ))
    app.add_handler(CommandHandler("mytasks", mytasks))
    app.add_handler(CommandHandler("donetask", donetask))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("summary", summary))
    app.add_handler(CommandHandler("clear", clear_logs))
    app.add_handler(CommandHandler("stopreminder", stop_reminder))
    app.add_handler(CommandHandler("summarydate", summary_by_date))


    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("eat", eat)],
        states={FOOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_food)]},
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    ))

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("drink", drink)],
        states={WATER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_water)]},
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    ))

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("reflect", reflect)],
        states={REFLECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reflection)]},
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    ))

    async def schedule_reminders(app):
        job_queue = app.job_queue
        job_queue.run_repeating(water_reminder, interval=2*60*60, first=0)
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ü–∏—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00 —É—Ç—Ä–∞ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
        from datetime import time
        job_queue.run_daily(send_morning_quote, time(hour=6, minute=0, second=0))
    app.post_init = schedule_reminders
